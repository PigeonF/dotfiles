diff --git a/src/job.ts b/src/job.ts
index 2a248da1dc1d1856..9d293a9e15389fb2 100644
--- a/src/job.ts
+++ b/src/job.ts
@@ -68,8 +68,8 @@ export class Job {
 
     static readonly illegalJobNames = new Set([
         "include", "local_configuration", "image", "services",
-        "stages", "types", "before_script", "default",
-        "after_script", "variables", "cache", "workflow",
+        "stages", "before_script", "default",
+        "after_script", "variables", "cache", "workflow", "page:deploy",
     ]);
 
     readonly argv: Argv;
diff --git a/src/parser.ts b/src/parser.ts
index 1e8557c0431e6fee..eca50115d88b5a54 100644
--- a/src/parser.ts
+++ b/src/parser.ts
@@ -60,7 +60,10 @@ export class Parser {
         await parser.init();
         const warnings = await Validator.run(parser.jobs, parser.stages);
         const parsingTime = process.hrtime(time);
-        writeStreams.stderr(chalk`{grey parsing and downloads finished} in {grey ${prettyHrtime(parsingTime)}}\n`);
+        const pathToExpandedGitLabCi = path.join(argv.cwd, argv.stateDir, "expanded-gitlab-ci.yml");
+        fs.mkdirpSync(path.join(argv.cwd, argv.stateDir));
+        fs.writeFileSync(pathToExpandedGitLabCi, yaml.dump(parser.gitlabData));
+        writeStreams.stderr(chalk`{grey parsing and downloads finished in ${prettyHrtime(parsingTime)}. Expanded gitlab-ci written to ${pathToExpandedGitLabCi}}\n`);
 
         for (const warning of warnings) {
             writeStreams.stderr(chalk`{yellow ${warning}}\n`);
@@ -69,8 +72,8 @@ export class Parser {
         // # Second layer of check for errors that are not caught in Validator.run
         if (parser.argv.jsonSchemaValidation) {
             const time = process.hrtime();
-            Validator.jsonSchemaValidation(parser.gitlabData);
-            writeStreams.stderr(chalk`{grey json schema validated} in {grey ${prettyHrtime(process.hrtime(time))}}\n`);
+            Validator.jsonSchemaValidation(pathToExpandedGitLabCi, parser.gitlabData);
+            writeStreams.stderr(chalk`{grey json schema validated in ${prettyHrtime(process.hrtime(time))}}\n`);
         }
         return parser;
     }
diff --git a/src/validator.ts b/src/validator.ts
index 9d79e80154f92b8a..40c53148c0a6e26d 100644
--- a/src/validator.ts
+++ b/src/validator.ts
@@ -2,11 +2,10 @@ import Ajv from "ajv";
 import {Job} from "./job";
 import assert from "assert";
 import chalk from "chalk";
-import * as yaml from "js-yaml";
 import schema from "./schema";
 
 export class Validator {
-    static jsonSchemaValidation (data: any) {
+    static jsonSchemaValidation (pathToExpandedGitLabCi: string, data: object) {
         const ajv = new Ajv({
             verbose: true,
             allErrors: true,
@@ -17,7 +16,23 @@ export class Validator {
         });
         const validate = ajv.compile(schema);
         const valid = validate(data);
-        assert(valid, chalk`Invalid gitlab-ci configuration! It have failed the json schema validation. Dump the following to the pipeline editor to debug: ${yaml.dump(data)}`);
+        if (!valid) {
+            console.error(`Invalid .gitlab-ci.yml configuration.
+\t* Dump the content of this to the GitLab pipeline editor to debug: ${pathToExpandedGitLabCi}
+\t* Use --json-schema-validation=false to disable schema validation
+`);
+            console.error("Validation errors:");
+            const MAX_ERRORS = 5;
+            const errors = ajv.errorsText(validate.errors, {
+                separator: "\n",
+                dataVar: "",
+            }).split("\n").map((line: string) => `\t${line.startsWith("/") ? line.slice(1) : line}`);
+            console.error(errors.splice(0, MAX_ERRORS).join("\n"));
+            if (errors.length > MAX_ERRORS) {
+                console.error(`\t... and ${errors.length - 5} more`);
+            }
+            process.exit(1);
+        }
     }
 
     private static needs (jobs: ReadonlyArray<Job>, stages: readonly string[]): string[] {
@@ -79,6 +94,22 @@ export class Validator {
         }
     }
 
+    /**
+     * These jobs named are reserved keywords in GitLab CI but does not prevent the pipeline from running
+     * https://github.com/firecow/gitlab-ci-local/issues/1263
+     * @param jobsNames
+     * @private
+     */
+    private static potentialIllegalJobName (jobsNames: string[]) {
+        const warnings = [];
+        for (const jobName of jobsNames) {
+            if (new Set(["types", "true", "false", "nil"]).has(jobName)) {
+                warnings.push(`Job name "${jobName}" is a reserved keyword. (https://docs.gitlab.com/ee/ci/jobs/#job-name-limitations)`);
+            }
+        }
+        return warnings;
+    }
+
     private static scriptBlank (jobs: ReadonlyArray<Job>) {
         for (const job of jobs) {
             if (job.trigger) continue; // Jobs with trigger are allowed to have empty script
@@ -102,6 +133,7 @@ export class Validator {
         warnings.push(...this.needs(jobs, stages));
         this.dependencies(jobs, stages);
         this.dependenciesContainment(jobs);
+        warnings.push(...this.potentialIllegalJobName(jobs.map(j => j.baseName)));
         return warnings;
     }
 }
