diff --git a/src/job.ts b/src/job.ts
index 1a9c345e61cbd0b9..cf96afcd39a07ca3 100644
--- a/src/job.ts
+++ b/src/job.ts
@@ -205,7 +205,7 @@ export class Job {
             assert(Array.isArray(c.paths), chalk`{blue ${this.name}} cache[${i}].paths must be array`);
         }

-        for (const [i, s] of Object.entries<any>(this.services)) {
+        for (const [i, s] of Object.entries<any>(this.getServices({}))) {
             assert(s.name, chalk`{blue ${this.name}} services[${i}].name is undefined`);
             assert(!s.command || Array.isArray(s.command), chalk`{blue ${this.name}} services[${i}].command must be an array`);
             assert(!s.entrypoint || Array.isArray(s.entrypoint), chalk`{blue ${this.name}} services[${i}].entrypoint must be an array`);
@@ -274,12 +274,19 @@ export class Job {
         return image.entrypoint;
     }

-    get services (): Service[] {
+    get hasServices(): boolean {
+        if (this.jobData["services"]) {
+            return true;
+        }
+        return false;
+    }
+
+    public getServices (dotenvVariables: {}): Service[] {
         const services: Service[] = [];
         if (!this.jobData["services"]) return [];

         for (const service of Object.values<any>(this.jobData["services"])) {
-            const expanded = Utils.expandVariables({...this._variables, ...service["variables"]});
+            const expanded = Utils.expandVariables({...this._variables, ...dotenvVariables, ...service["variables"]});
             let serviceName = Utils.expandText(service["name"], expanded);
             serviceName = serviceName.includes(":") ? serviceName : `${serviceName}:latest`;
             services.push({
@@ -446,11 +453,11 @@ export class Job {
             writeStreams.stdout(chalk`${this.formattedJobName} {magentaBright copied to docker volumes} in {magenta ${prettyHrtime(endTime)}}\n`);
         }

-        if (this.services?.length) {
+        if (this.hasServices) {
             await this.createDockerNetwork(`gitlab-ci-local-${this.jobId}`);

             await Promise.all(
-                this.services.map(async (service, serviceIndex) => {
+                this.getServices(reportsDotenvVariables).map(async (service, serviceIndex) => {
                     const serviceName = service.name;
                     await this.pullImage(writeStreams, serviceName);
                     const serviceContainerId = await this.startService(writeStreams, Utils.expandVariables({...expanded, ...service.variables}), service);
@@ -644,7 +651,7 @@ export class Job {
                 dockerCmd += "--user 0:0 ";
             }

-            if (this.services?.length) {
+            if (this.hasServices) {
                 dockerCmd += `--network gitlab-ci-local-${this.jobId} `;
                 dockerCmd += "--network-alias=build ";
             }
diff --git a/tests/test-cases/artifacts-dotenv/.gitlab-ci.yml b/tests/test-cases/artifacts-dotenv/.gitlab-ci.yml
index 04ee407405760908..41718d75e2fb158d 100644
--- a/tests/test-cases/artifacts-dotenv/.gitlab-ci.yml
+++ b/tests/test-cases/artifacts-dotenv/.gitlab-ci.yml
@@ -4,6 +4,8 @@ build-image-ref:
   needs: []
   script:
     - echo "BUILD_IMAGE_REF=alpine" > build.env
+    - echo "SERVICE_IMAGE_REF=docker.io/library/redis" >> build.env
+    - echo "SERVICE_IMAGE_ALIAS=redis" >> build.env
   artifacts:
     reports: { dotenv: build.env }

@@ -13,3 +15,13 @@ use-image-ref:
   image: ${BUILD_IMAGE_REF}
   script:
     - if [ "$BUILD_IMAGE_REF" = "" ]; then exit 1; else cat /etc/os-release; fi
+
+use-service-ref:
+  stage: deploy
+  needs: [build-image-ref]
+  services:
+    - name: $SERVICE_IMAGE_REF
+      alias: $SERVICE_IMAGE_ALIAS
+  image: docker.io/tutum/dnsutils
+  script:
+    - host $SERVICE_IMAGE_ALIAS
diff --git a/tests/test-cases/artifacts-dotenv/integration.artifacts-dotenv.test.ts b/tests/test-cases/artifacts-dotenv/integration.artifacts-dotenv.test.ts
index ef174d11c65354aa..f206af6d017e561d 100644
--- a/tests/test-cases/artifacts-dotenv/integration.artifacts-dotenv.test.ts
+++ b/tests/test-cases/artifacts-dotenv/integration.artifacts-dotenv.test.ts
@@ -17,3 +17,14 @@ test("artifacts-dotenv <use-image-ref> --needs", async () => {

     expect(writeStreams.stderrLines.join("\n")).not.toMatch(/FAIL/);
 });
+
+test("artifacts-dotenv <use-service-ref> --needs", async () => {
+    const writeStreams = new WriteStreamsMock();
+    await handler({
+        cwd: "tests/test-cases/artifacts-dotenv",
+        job: ["use-service-ref"],
+        needs: true,
+    }, writeStreams);
+
+    expect(writeStreams.stderrLines.join("\n")).not.toMatch(/FAIL/);
+});
